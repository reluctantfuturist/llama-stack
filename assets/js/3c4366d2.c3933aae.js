"use strict";(self.webpackChunkdocusaurus_template_openapi_docs=self.webpackChunkdocusaurus_template_openapi_docs||[]).push([[9420],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var r=t(96540);const i={},s=r.createContext(i);function l(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:n},e.children)}},64911:(e,n,t)=>{t.d(n,{A:()=>m});var r=t(96540),i=t(34164),s=t(65627),l=t(77448),a=t(9136);const o={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var c=t(74848);function d({className:e,block:n,selectedValue:t,selectValue:r,tabValues:l}){const a=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.a_)(),u=e=>{const n=e.currentTarget,i=a.indexOf(n),s=l[i].value;s!==t&&(d(n),r(s))},h=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=a.indexOf(e.currentTarget)+1;n=a[t]??a[0];break}case"ArrowLeft":{const t=a.indexOf(e.currentTarget)-1;n=a[t]??a[a.length-1];break}}n?.focus()};return(0,c.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:l.map(({value:e,label:n,attributes:r})=>(0,c.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{a.push(e)},onKeyDown:h,onClick:u,...r,className:(0,i.A)("tabs__item",o.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function u({lazy:e,children:n,selectedValue:t}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===t);return e?(0,r.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,c.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function h(e){const n=(0,l.u)(e);return(0,c.jsxs)("div",{className:(0,i.A)("tabs-container",o.tabList),children:[(0,c.jsx)(d,{...n,...e}),(0,c.jsx)(u,{...n,...e})]})}function m(e){const n=(0,a.default)();return(0,c.jsx)(h,{...e,children:(0,l.v)(e.children)},String(n))}},77448:(e,n,t)=>{t.d(n,{u:()=>m,v:()=>c});var r=t(96540),i=t(56347),s=t(50372),l=t(30604),a=t(78749),o=t(11861);function c(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)(()=>{const e=n??function(e){return c(e).map(({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r}))}(t);return function(e){const n=(0,o.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function u({value:e,tabValues:n}){return n.some(n=>n.value===e)}function h({queryString:e=!1,groupId:n}){const t=(0,i.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(s),(0,r.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})},[s,t])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,l=d(e),[o,c]=(0,r.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:l})),[m,p]=h({queryString:t,groupId:i}),[g,x]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,i]=(0,a.Dv)(n);return[t,(0,r.useCallback)(e=>{n&&i.set(e)},[n,i])]}({groupId:i}),j=(()=>{const e=m??g;return u({value:e,tabValues:l})?e:null})();(0,s.A)(()=>{j&&c(j)},[j]);return{selectedValue:o,selectValue:(0,r.useCallback)(e=>{if(!u({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);c(e),p(e),x(e)},[p,x,l]),tabValues:l}}},79329:(e,n,t)=>{t.r(n),t.d(n,{default:()=>l});t(96540);var r=t(34164);const i={tabItem:"tabItem_Ymn6"};var s=t(74848);function l({children:e,hidden:n,className:t}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,t),hidden:n,children:e})}},83951:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"building-applications/telemetry","title":"Telemetry","description":"Monitor and observe Llama Stack applications with comprehensive telemetry capabilities","source":"@site/docs/building-applications/telemetry.mdx","sourceDirName":"building-applications","slug":"/building-applications/telemetry","permalink":"/llama-stack/docs/building-applications/telemetry","draft":false,"unlisted":false,"editUrl":"https://github.com/meta-llama/llama-stack/tree/main/docs/docs/building-applications/telemetry.mdx","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"title":"Telemetry","description":"Monitor and observe Llama Stack applications with comprehensive telemetry capabilities","sidebar_label":"Telemetry","sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Evaluations","permalink":"/llama-stack/docs/building-applications/evals"},"next":{"title":"Safety","permalink":"/llama-stack/docs/building-applications/safety"}}');var i=t(74848),s=t(28453),l=t(64911),a=t(79329);const o={title:"Telemetry",description:"Monitor and observe Llama Stack applications with comprehensive telemetry capabilities",sidebar_label:"Telemetry",sidebar_position:8},c="Telemetry",d={},u=[{value:"Event Types",id:"event-types",level:2},{value:"Spans and Traces",id:"spans-and-traces",level:2},{value:"Automatic Metrics Generation",id:"automatic-metrics-generation",level:2},{value:"Available Metrics",id:"available-metrics",level:3},{value:"Metric Generation Flow",id:"metric-generation-flow",level:3},{value:"Metric Aggregation Level",id:"metric-aggregation-level",level:3},{value:"Example Metric Event",id:"example-metric-event",level:3},{value:"Telemetry Sinks",id:"telemetry-sinks",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Meta-Reference Provider",id:"meta-reference-provider",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Visualization with Jaeger",id:"visualization-with-jaeger",level:2},{value:"Starting Jaeger",id:"starting-jaeger",level:3},{value:"Querying Metrics",id:"querying-metrics",level:2},{value:"SQLite Querying",id:"sqlite-querying",level:2},{value:"Example Queries",id:"example-queries",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"\ud83d\udd0d <strong>Monitoring Strategy</strong>",id:"-monitoring-strategy",level:3},{value:"\ud83d\udcca <strong>Metrics Analysis</strong>",id:"-metrics-analysis",level:3},{value:"\ud83d\udea8 <strong>Alerting &amp; Debugging</strong>",id:"-alerting--debugging",level:3},{value:"\ud83d\udd27 <strong>Configuration Management</strong>",id:"-configuration-management",level:3},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Basic Telemetry Setup",id:"basic-telemetry-setup",level:3},{value:"Custom Telemetry Context",id:"custom-telemetry-context",level:3},{value:"Related Resources",id:"related-resources",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"telemetry",children:"Telemetry"})}),"\n",(0,i.jsx)(n.p,{children:"The Llama Stack telemetry system provides comprehensive tracing, metrics, and logging capabilities. It supports multiple sink types including OpenTelemetry, SQLite, and Console output for complete observability of your AI applications."}),"\n",(0,i.jsx)(n.h2,{id:"event-types",children:"Event Types"}),"\n",(0,i.jsx)(n.p,{children:"The telemetry system supports three main types of events:"}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsxs)(a.default,{value:"unstructured",label:"Unstructured Logs",children:[(0,i.jsx)(n.p,{children:"Free-form log messages with severity levels for general application logging:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'unstructured_log_event = UnstructuredLogEvent(\n    message="This is a log message",\n    severity=LogSeverity.INFO\n)\n'})})]}),(0,i.jsxs)(a.default,{value:"metrics",label:"Metric Events",children:[(0,i.jsx)(n.p,{children:"Numerical measurements with units for tracking performance and usage:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'metric_event = MetricEvent(\n    metric="my_metric",\n    value=10,\n    unit="count"\n)\n'})})]}),(0,i.jsxs)(a.default,{value:"structured",label:"Structured Logs",children:[(0,i.jsx)(n.p,{children:"System events like span start/end that provide structured operation tracking:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'structured_log_event = SpanStartPayload(\n    name="my_span",\n    parent_span_id="parent_span_id"\n)\n'})})]})]}),"\n",(0,i.jsx)(n.h2,{id:"spans-and-traces",children:"Spans and Traces"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spans"}),": Represent individual operations with timing information and hierarchical relationships"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Traces"}),": Collections of related spans that form a complete request flow across your application"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This hierarchical structure allows you to understand the complete execution path of requests through your Llama Stack application."}),"\n",(0,i.jsx)(n.h2,{id:"automatic-metrics-generation",children:"Automatic Metrics Generation"}),"\n",(0,i.jsxs)(n.p,{children:["Llama Stack automatically generates metrics during inference operations. These metrics are aggregated at the ",(0,i.jsx)(n.strong,{children:"inference request level"})," and provide insights into token usage and model performance."]}),"\n",(0,i.jsx)(n.h3,{id:"available-metrics",children:"Available Metrics"}),"\n",(0,i.jsx)(n.p,{children:"The following metrics are automatically generated for each inference request:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Metric Name"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Unit"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Labels"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"llama_stack_prompt_tokens_total"})}),(0,i.jsx)(n.td,{children:"Counter"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tokens"})}),(0,i.jsx)(n.td,{children:"Number of tokens in the input prompt"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"model_id"}),", ",(0,i.jsx)(n.code,{children:"provider_id"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"llama_stack_completion_tokens_total"})}),(0,i.jsx)(n.td,{children:"Counter"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tokens"})}),(0,i.jsx)(n.td,{children:"Number of tokens in the generated response"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"model_id"}),", ",(0,i.jsx)(n.code,{children:"provider_id"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"llama_stack_tokens_total"})}),(0,i.jsx)(n.td,{children:"Counter"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tokens"})}),(0,i.jsx)(n.td,{children:"Total tokens used (prompt + completion)"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"model_id"}),", ",(0,i.jsx)(n.code,{children:"provider_id"})]})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"metric-generation-flow",children:"Metric Generation Flow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Token Counting"}),": During inference operations (chat completion, completion, etc.), the system counts tokens in both input prompts and generated responses"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Metric Construction"}),": For each request, ",(0,i.jsx)(n.code,{children:"MetricEvent"})," objects are created with the token counts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Telemetry Logging"}),": Metrics are sent to the configured telemetry sinks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OpenTelemetry Export"}),": When OpenTelemetry is enabled, metrics are exposed as standard OpenTelemetry counters"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"metric-aggregation-level",children:"Metric Aggregation Level"}),"\n",(0,i.jsxs)(n.p,{children:["All metrics are generated and aggregated at the ",(0,i.jsx)(n.strong,{children:"inference request level"}),". This means:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Each individual inference request generates its own set of metrics"}),"\n",(0,i.jsx)(n.li,{children:"Metrics are not pre-aggregated across multiple requests"}),"\n",(0,i.jsx)(n.li,{children:"Aggregation (sums, averages, etc.) can be performed by your observability tools (Prometheus, Grafana, etc.)"}),"\n",(0,i.jsxs)(n.li,{children:["Each metric includes labels for ",(0,i.jsx)(n.code,{children:"model_id"})," and ",(0,i.jsx)(n.code,{children:"provider_id"})," to enable filtering and grouping"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-metric-event",children:"Example Metric Event"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'MetricEvent(\n    trace_id="1234567890abcdef",\n    span_id="abcdef1234567890",\n    metric="total_tokens",\n    value=150,\n    timestamp=1703123456.789,\n    unit="tokens",\n    attributes={\n        "model_id": "meta-llama/Llama-3.2-3B-Instruct",\n        "provider_id": "tgi"\n    },\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"telemetry-sinks",children:"Telemetry Sinks"}),"\n",(0,i.jsx)(n.p,{children:"Choose from multiple sink types based on your observability needs:"}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsxs)(a.default,{value:"opentelemetry",label:"OpenTelemetry",children:[(0,i.jsx)(n.p,{children:"Send events to an OpenTelemetry Collector for integration with observability platforms:"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use Cases:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Visualizing traces in tools like Jaeger"}),"\n",(0,i.jsx)(n.li,{children:"Collecting metrics for Prometheus"}),"\n",(0,i.jsx)(n.li,{children:"Integration with enterprise observability stacks"}),"\n"]}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Features:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Standard OpenTelemetry format"}),"\n",(0,i.jsx)(n.li,{children:"Compatible with all OpenTelemetry collectors"}),"\n",(0,i.jsx)(n.li,{children:"Supports both traces and metrics"}),"\n"]})]}),(0,i.jsxs)(a.default,{value:"sqlite",label:"SQLite",children:[(0,i.jsx)(n.p,{children:"Store events in a local SQLite database for direct querying:"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use Cases:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Local development and debugging"}),"\n",(0,i.jsx)(n.li,{children:"Custom analytics and reporting"}),"\n",(0,i.jsx)(n.li,{children:"Offline analysis of application behavior"}),"\n"]}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Features:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Direct SQL querying capabilities"}),"\n",(0,i.jsx)(n.li,{children:"Persistent local storage"}),"\n",(0,i.jsx)(n.li,{children:"No external dependencies"}),"\n"]})]}),(0,i.jsxs)(a.default,{value:"console",label:"Console",children:[(0,i.jsx)(n.p,{children:"Print events to the console for immediate debugging:"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use Cases:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Development and testing"}),"\n",(0,i.jsx)(n.li,{children:"Quick debugging sessions"}),"\n",(0,i.jsx)(n.li,{children:"Simple logging without external tools"}),"\n"]}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Features:"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Immediate output visibility"}),"\n",(0,i.jsx)(n.li,{children:"No setup required"}),"\n",(0,i.jsx)(n.li,{children:"Human-readable format"}),"\n"]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"meta-reference-provider",children:"Meta-Reference Provider"}),"\n",(0,i.jsx)(n.p,{children:"Currently, only the meta-reference provider is implemented. It can be configured to send events to multiple sink types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"telemetry:\n  - provider_id: meta-reference\n    provider_type: inline::meta-reference\n    config:\n      service_name: \"llama-stack-service\"\n      sinks: ['console', 'sqlite', 'otel_trace', 'otel_metric']\n      otel_exporter_otlp_endpoint: \"http://localhost:4318\"\n      sqlite_db_path: \"/path/to/telemetry.db\"\n"})}),"\n",(0,i.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsx)(n.p,{children:"Configure telemetry behavior using environment variables:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"OTEL_EXPORTER_OTLP_ENDPOINT"})}),": OpenTelemetry Collector endpoint (default: ",(0,i.jsx)(n.code,{children:"http://localhost:4318"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"OTEL_SERVICE_NAME"})}),": Service name for telemetry (default: empty string)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"TELEMETRY_SINKS"})}),": Comma-separated list of sinks (default: ",(0,i.jsx)(n.code,{children:"console,sqlite"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"visualization-with-jaeger",children:"Visualization with Jaeger"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"otel_trace"})," sink works with any service compatible with the OpenTelemetry collector. Traces and metrics use separate endpoints but can share the same collector."]}),"\n",(0,i.jsx)(n.h3,{id:"starting-jaeger",children:"Starting Jaeger"}),"\n",(0,i.jsx)(n.p,{children:"Start a Jaeger instance with OTLP HTTP endpoint at 4318 and the Jaeger UI at 16686:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run --pull always --rm --name jaeger \\\n  -p 16686:16686 -p 4318:4318 \\\n  jaegertracing/jaeger:2.1.0\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Once running, you can visualize traces by navigating to ",(0,i.jsx)(n.a,{href:"http://localhost:16686/",children:"http://localhost:16686/"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"querying-metrics",children:"Querying Metrics"}),"\n",(0,i.jsx)(n.p,{children:"When using the OpenTelemetry sink, metrics are exposed in standard format and can be queried through various tools:"}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsxs)(a.default,{value:"prometheus",label:"Prometheus Queries",children:[(0,i.jsx)(n.p,{children:"Example Prometheus queries for analyzing token usage:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-promql",children:"# Total tokens used across all models\nsum(llama_stack_tokens_total)\n\n# Tokens per model\nsum by (model_id) (llama_stack_tokens_total)\n\n# Average tokens per request over 5 minutes\nrate(llama_stack_tokens_total[5m])\n\n# Token usage by provider\nsum by (provider_id) (llama_stack_tokens_total)\n"})})]}),(0,i.jsxs)(a.default,{value:"grafana",label:"Grafana Dashboards",children:[(0,i.jsx)(n.p,{children:"Create dashboards using Prometheus as a data source:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Token Usage Over Time"}),": Line charts showing token consumption trends"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Model Performance"}),": Comparison of different models by token efficiency"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Provider Analysis"}),": Breakdown of usage across different providers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Request Patterns"}),": Understanding peak usage times and patterns"]}),"\n"]})]}),(0,i.jsxs)(a.default,{value:"otlp",label:"OpenTelemetry Collector",children:[(0,i.jsx)(n.p,{children:"Forward metrics to other observability systems:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Export to multiple backends simultaneously"}),"\n",(0,i.jsx)(n.li,{children:"Apply transformations and filtering"}),"\n",(0,i.jsx)(n.li,{children:"Integrate with existing monitoring infrastructure"}),"\n"]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"sqlite-querying",children:"SQLite Querying"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"sqlite"})," sink allows you to query traces without an external system. This is particularly useful for development and custom analytics."]}),"\n",(0,i.jsx)(n.h3,{id:"example-queries",children:"Example Queries"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Query recent traces\nSELECT * FROM traces WHERE timestamp > datetime('now', '-1 hour');\n\n-- Analyze span durations\nSELECT name, AVG(duration_ms) as avg_duration\nFROM spans\nGROUP BY name\nORDER BY avg_duration DESC;\n\n-- Find slow operations\nSELECT * FROM spans\nWHERE duration_ms > 1000\nORDER BY duration_ms DESC;\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Advanced Analytics",type:"tip",children:(0,i.jsxs)(n.p,{children:["Refer to the ",(0,i.jsx)(n.a,{href:"https://github.com/meta-llama/llama-stack/blob/main/docs/getting_started.ipynb",children:"Getting Started notebook"})," for more examples on querying traces and spans programmatically."]})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.h3,{id:"-monitoring-strategy",children:["\ud83d\udd0d ",(0,i.jsx)(n.strong,{children:"Monitoring Strategy"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use OpenTelemetry for production environments"}),"\n",(0,i.jsx)(n.li,{children:"Combine multiple sinks for development (console + SQLite)"}),"\n",(0,i.jsx)(n.li,{children:"Set up alerts on key metrics like token usage and error rates"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"-metrics-analysis",children:["\ud83d\udcca ",(0,i.jsx)(n.strong,{children:"Metrics Analysis"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Track token usage trends to optimize costs"}),"\n",(0,i.jsx)(n.li,{children:"Monitor response times across different models"}),"\n",(0,i.jsx)(n.li,{children:"Analyze usage patterns to improve resource allocation"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"-alerting--debugging",children:["\ud83d\udea8 ",(0,i.jsx)(n.strong,{children:"Alerting & Debugging"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Set up alerts for unusual token consumption spikes"}),"\n",(0,i.jsx)(n.li,{children:"Use trace data to debug performance issues"}),"\n",(0,i.jsx)(n.li,{children:"Monitor error rates and failure patterns"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"-configuration-management",children:["\ud83d\udd27 ",(0,i.jsx)(n.strong,{children:"Configuration Management"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use environment variables for flexible deployment"}),"\n",(0,i.jsx)(n.li,{children:"Configure appropriate retention policies for SQLite"}),"\n",(0,i.jsx)(n.li,{children:"Ensure proper network access to OpenTelemetry collectors"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,i.jsx)(n.h3,{id:"basic-telemetry-setup",children:"Basic Telemetry Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from llama_stack_client import LlamaStackClient\n\n# Client with telemetry headers\nclient = LlamaStackClient(\n    base_url="http://localhost:8000",\n    extra_headers={\n        "X-Telemetry-Service": "my-ai-app",\n        "X-Telemetry-Version": "1.0.0"\n    }\n)\n\n# All API calls will be automatically traced\nresponse = client.inference.chat_completion(\n    model="meta-llama/Llama-3.2-3B-Instruct",\n    messages=[{"role": "user", "content": "Hello!"}]\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-telemetry-context",children:"Custom Telemetry Context"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Add custom span attributes for better tracking\nwith tracer.start_as_current_span("custom_operation") as span:\n    span.set_attribute("user_id", "user123")\n    span.set_attribute("operation_type", "chat_completion")\n\n    response = client.inference.chat_completion(\n        model="meta-llama/Llama-3.2-3B-Instruct",\n        messages=[{"role": "user", "content": "Hello!"}]\n    )\n'})}),"\n",(0,i.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"./agent",children:"Agents"})})," - Monitoring agent execution with telemetry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"./evals",children:"Evaluations"})})," - Using telemetry data for performance evaluation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/meta-llama/llama-stack/blob/main/docs/getting_started.ipynb",children:"Getting Started Notebook"})})," - Telemetry examples and queries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry Documentation"})})," - Comprehensive observability framework"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://www.jaegertracing.io/",children:"Jaeger Documentation"})})," - Distributed tracing visualization"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);