"use strict";(self.webpackChunkdocusaurus_template_openapi_docs=self.webpackChunkdocusaurus_template_openapi_docs||[]).push([[1238],{28453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>d});var r=i(96540);const n={},o=r.createContext(n);function s(e){const t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),r.createElement(o.Provider,{value:t},e.children)}},68670:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"providers/vector_io/inline_chromadb","title":"inline::chromadb","description":"[Chroma](https://www","source":"@site/docs/providers/vector_io/inline_chromadb.mdx","sourceDirName":"providers/vector_io","slug":"/providers/vector_io/inline_chromadb","permalink":"/llama-stack/docs/providers/vector_io/inline_chromadb","draft":false,"unlisted":false,"editUrl":"https://github.com/meta-llama/llama-stack/tree/main/docs/docs/providers/vector_io/inline_chromadb.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"[Chroma](https://www","sidebar_label":"Chromadb","sidebar_position":2,"title":"inline::chromadb"},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/llama-stack/docs/providers/vector_io/"},"next":{"title":"Faiss","permalink":"/llama-stack/docs/providers/vector_io/inline_faiss"}}');var n=i(74848),o=i(28453);const s={description:"[Chroma](https://www",sidebar_label:"Chromadb",sidebar_position:2,title:"inline::chromadb"},d="inline::chromadb",a={},c=[{value:"Description",id:"description",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Sample Configuration",id:"sample-configuration",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"inlinechromadb",children:"inline::chromadb"})}),"\n",(0,n.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://www.trychroma.com/",children:"Chroma"})," is an inline and remote vector\ndatabase provider for Llama Stack. It allows you to store and query vectors directly within a Chroma database.\nThat means you're not limited to storing vectors in memory or in a separate service."]}),"\n",(0,n.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Field"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Required"}),(0,n.jsx)(t.th,{children:"Default"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"db_path"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"<class 'str'>"})}),(0,n.jsx)(t.td,{children:"No"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"kvstore"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"utils.kvstore.config.RedisKVStoreConfig | utils.kvstore.config.SqliteKVStoreConfig | utils.kvstore.config.PostgresKVStoreConfig | utils.kvstore.config.MongoDBKVStoreConfig"})}),(0,n.jsx)(t.td,{children:"No"}),(0,n.jsx)(t.td,{children:"sqlite"}),(0,n.jsx)(t.td,{children:"Config for KV store backend"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"sample-configuration",children:"Sample Configuration"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"db_path: ${env.CHROMADB_PATH}\nkvstore:\n  type: sqlite\n  db_path: ${env.SQLITE_STORE_DIR:=~/.llama/dummy}/chroma_inline_registry.db\n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);