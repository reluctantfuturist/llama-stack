"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5161],{1955:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"contributing/new-vector-database","title":"Adding a New Vector Database","description":"Guide for adding new vector database providers to Llama Stack","source":"@site/docs/contributing/new-vector-database.mdx","sourceDirName":"contributing","slug":"/contributing/new-vector-database","permalink":"/llama-stack/docs/contributing/new-vector-database","draft":false,"unlisted":false,"editUrl":"https://github.com/meta-llama/llama-stack/tree/main/docs/docs/contributing/new-vector-database.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Adding a New Vector Database","description":"Guide for adding new vector database providers to Llama Stack","sidebar_label":"New Vector Database","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"New API Provider","permalink":"/llama-stack/docs/contributing/new-api-provider"},"next":{"title":"Testing Record-Replay","permalink":"/llama-stack/docs/contributing/testing-record-replay"}}');var i=r(74848),s=r(28453),a=r(4865),o=r(19365);const d={title:"Adding a New Vector Database",description:"Guide for adding new vector database providers to Llama Stack",sidebar_label:"New Vector Database",sidebar_position:3},l=void 0,c={},p=[{value:"Overview",id:"overview",level:2},{value:"Implementation Steps",id:"implementation-steps",level:2},{value:"Step 1: Choose Database Type",id:"step-1-choose-database-type",level:3},{value:"Step 2: Implement the Provider",id:"step-2-implement-the-provider",level:3},{value:"Vector Index Implementation",id:"vector-index-implementation",level:4},{value:"Vector IO Adapter Implementation",id:"vector-io-adapter-implementation",level:4},{value:"Step 3: Add to Registry",id:"step-3-add-to-registry",level:3},{value:"Step 4: Add Tests",id:"step-4-add-tests",level:3},{value:"Unit Tests Configuration",id:"unit-tests-configuration",level:4},{value:"Integration Tests",id:"integration-tests",level:4},{value:"Step 5: Update Dependencies",id:"step-5-update-dependencies",level:3},{value:"Step 6: Update Documentation",id:"step-6-update-documentation",level:3},{value:"Configuration Best Practices",id:"configuration-best-practices",level:2},{value:"Provider Configuration Class",id:"provider-configuration-class",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Testing Your Implementation",id:"testing-your-implementation",level:2},{value:"Local Testing",id:"local-testing",level:3},{value:"Manual Validation",id:"manual-validation",level:3},{value:"Common Implementation Patterns",id:"common-implementation-patterns",level:2},{value:"Connection Management",id:"connection-management",level:3},{value:"Batch Operations",id:"batch-operations",level:3},{value:"Related Resources",id:"related-resources",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This guide will walk you through the process of adding a new vector database provider to Llama Stack."}),"\n",(0,i.jsx)(n.admonition,{title:"Example Implementation",type:"note",children:(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"https://github.com/meta-llama/llama-stack/pull/1467",children:"Milvus Vector Database Provider"})," Pull Request for a complete implementation example."]})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Vector Database providers are used to store and retrieve vector embeddings. They're not limited to vector search but can support:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Vector search"})," - Semantic similarity search using embeddings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keyword search"})," - Traditional text-based search"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hybrid search"})," - Combining vector and keyword search"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operations"})," - Filtering, sorting, and aggregating vectors"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-steps",children:"Implementation Steps"}),"\n",(0,i.jsx)(n.h3,{id:"step-1-choose-database-type",children:"Step 1: Choose Database Type"}),"\n",(0,i.jsx)(n.p,{children:"Determine your vector database deployment model:"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsxs)(o.default,{value:"remote",label:"Remote Provider",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Remote databases"})," make requests to external services:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"External hosted services (Pinecone, Weaviate Cloud)"}),"\n",(0,i.jsx)(n.li,{children:"Self-hosted services running on different infrastructure"}),"\n",(0,i.jsx)(n.li,{children:"Requires network communication and authentication"}),"\n"]})]}),(0,i.jsxs)(o.default,{value:"inline",label:"Inline Provider",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Inline databases"})," execute locally:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Embedded databases (SQLite, DuckDB)"}),"\n",(0,i.jsx)(n.li,{children:"Local instances (ChromaDB, FAISS)"}),"\n",(0,i.jsx)(n.li,{children:"Direct library integration"}),"\n"]})]}),(0,i.jsxs)(o.default,{value:"both",label:"Hybrid Provider",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Both remote and inline"})," support:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Services that can run locally or remotely"}),"\n",(0,i.jsx)(n.li,{children:"Different connection modes for the same technology"}),"\n",(0,i.jsx)(n.li,{children:"Example: ChromaDB can run inline or as a remote service"}),"\n"]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"step-2-implement-the-provider",children:"Step 2: Implement the Provider"}),"\n",(0,i.jsx)(n.p,{children:"Create a new provider class with two main components:"}),"\n",(0,i.jsx)(n.h4,{id:"vector-index-implementation",children:"Vector Index Implementation"}),"\n",(0,i.jsxs)(n.p,{children:["Implement ",(0,i.jsx)(n.code,{children:"YourVectorIndex"})," with these required methods:"]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.default,{value:"index-core",label:"Core Methods",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class YourVectorIndex:\n    async def create(self, vector_db_id: str, embedding_dimension: int, **kwargs):\n        """Create a new vector index"""\n        pass\n\n    async def initialize(self):\n        """Initialize the vector index connection"""\n        pass\n\n    async def add_chunks(self, chunks: List[Chunk]) -> List[str]:\n        """Add vector chunks to the index"""\n        pass\n\n    async def delete_chunk(self, chunk_ids: List[str]):\n        """Delete chunks by their IDs"""\n        pass\n'})})}),(0,i.jsx)(o.default,{value:"index-search",label:"Search Methods",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'    async def query_vector(self, embedding: List[float], k: int = 10, **kwargs):\n        """Perform vector similarity search"""\n        pass\n\n    async def query_keyword(self, query: str, k: int = 10, **kwargs):\n        """Perform keyword-based search"""\n        pass\n\n    async def query_hybrid(self,\n                          embedding: List[float],\n                          query: str,\n                          k: int = 10,\n                          **kwargs):\n        """Perform hybrid vector + keyword search"""\n        pass\n'})})})]}),"\n",(0,i.jsx)(n.h4,{id:"vector-io-adapter-implementation",children:"Vector IO Adapter Implementation"}),"\n",(0,i.jsxs)(n.p,{children:["Implement ",(0,i.jsx)(n.code,{children:"YourVectorIOAdapter"})," with these required methods:"]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.default,{value:"adapter-lifecycle",label:"Lifecycle Methods",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class YourVectorIOAdapter:\n    async def initialize(self):\n        """Initialize the adapter and establish connections"""\n        pass\n\n    async def shutdown(self):\n        """Clean up resources and close connections"""\n        pass\n'})})}),(0,i.jsx)(o.default,{value:"adapter-management",label:"Database Management",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'    async def list_vector_dbs(self) -> List[VectorDB]:\n        """List all available vector databases"""\n        pass\n\n    async def register_vector_db(self, vector_db: VectorDB):\n        """Register a new vector database"""\n        pass\n\n    async def unregister_vector_db(self, vector_db_id: str):\n        """Unregister a vector database"""\n        pass\n'})})}),(0,i.jsx)(o.default,{value:"adapter-operations",label:"Data Operations",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'    async def insert_chunks(self, vector_db_id: str, chunks: List[Chunk]):\n        """Insert chunks into the specified vector database"""\n        pass\n\n    async def query_chunks(self, vector_db_id: str, query: VectorQuery):\n        """Query chunks from the specified vector database"""\n        pass\n\n    async def delete_chunks(self, vector_db_id: str, chunk_ids: List[str]):\n        """Delete chunks from the specified vector database"""\n        pass\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"step-3-add-to-registry",children:"Step 3: Add to Registry"}),"\n",(0,i.jsxs)(n.p,{children:["Register your provider in ",(0,i.jsx)(n.code,{children:"llama_stack/providers/registry/vector_io.py"}),":"]}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.default,{value:"inline-registration",label:"Inline Provider",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from llama_stack.providers.registry.specs import InlineProviderSpec\nfrom llama_stack.providers.registry.api import Api\n\nInlineProviderSpec(\n    api=Api.vector_io,\n    provider_type="inline::milvus",\n    pip_packages=["pymilvus>=2.4.10"],\n    module="llama_stack.providers.inline.vector_io.milvus",\n    config_class="llama_stack.providers.inline.vector_io.milvus.MilvusVectorIOConfig",\n    api_dependencies=[Api.inference],\n    optional_api_dependencies=[Api.files],\n    description="Milvus vector database for high-performance similarity search",\n)\n'})})}),(0,i.jsx)(o.default,{value:"remote-registration",label:"Remote Provider",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from llama_stack.providers.registry.specs import RemoteProviderSpec\n\nRemoteProviderSpec(\n    api=Api.vector_io,\n    provider_type="remote::pinecone",\n    pip_packages=["pinecone-client>=2.0.0"],\n    module="llama_stack.providers.remote.vector_io.pinecone",\n    config_class="llama_stack.providers.remote.vector_io.pinecone.PineconeConfig",\n    api_dependencies=[Api.inference],\n    description="Pinecone cloud vector database service",\n)\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"step-4-add-tests",children:"Step 4: Add Tests"}),"\n",(0,i.jsx)(n.p,{children:"Comprehensive testing ensures your provider works correctly:"}),"\n",(0,i.jsx)(n.h4,{id:"unit-tests-configuration",children:"Unit Tests Configuration"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsxs)(o.default,{value:"conftest",label:"Test Configuration",children:[(0,i.jsxs)(n.p,{children:["Update ",(0,i.jsx)(n.code,{children:"/tests/unit/providers/vector_io/conftest.py"}),":"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# 1. Add your provider to the vector_provider fixture\n@pytest.fixture\ndef vector_provider():\n    return {\n        # ... existing providers\n        "your_vectorprovider": "inline::your_vectorprovider",\n    }\n\n# 2. Create your vector index fixture\n@pytest.fixture\nasync def your_vectorprovider_index():\n    config = YourVectorProviderConfig(\n        # Your test configuration\n    )\n    index = YourVectorIndex(config)\n    await index.initialize()\n    yield index\n    # Cleanup if needed\n\n# 3. Create your adapter fixture\n@pytest.fixture\nasync def your_vectorprovider_adapter():\n    config = YourVectorProviderConfig(\n        # Your test configuration\n    )\n    adapter = YourVectorIOAdapter(config)\n    await adapter.initialize()\n    yield adapter\n    await adapter.shutdown()\n\n# 4. Add to vector_io_providers fixture\n@pytest.fixture\ndef vector_io_providers():\n    return {\n        # ... existing providers\n        "your_vectorprovider": {\n            "index": "your_vectorprovider_index",\n            "adapter": "your_vectorprovider_adapter",\n        }\n    }\n'})})]}),(0,i.jsxs)(o.default,{value:"naming",label:"Naming Convention",children:[(0,i.jsx)(n.p,{children:"Follow the naming convention for fixtures:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Index fixture: ",(0,i.jsx)(n.code,{children:"{provider_name}_index"})]}),"\n",(0,i.jsxs)(n.li,{children:["Adapter fixture: ",(0,i.jsx)(n.code,{children:"{provider_name}_adapter"})]}),"\n"]}),(0,i.jsx)(n.p,{children:"This naming is required for the automated tests to execute properly."})]})]}),"\n",(0,i.jsx)(n.h4,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsxs)(o.default,{value:"vector-io-tests",label:"Core Vector IO Tests",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Location:"})," ",(0,i.jsx)(n.code,{children:"tests/integration/vector_io/test_vector_io.py"})]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Tests:"})," Registration, insertion, and retrieval functionality"]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"No changes needed"})," - tests run automatically for all registered providers"]})]}),(0,i.jsxs)(o.default,{value:"openai-tests",label:"OpenAI Compatibility Tests",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Location:"})," ",(0,i.jsx)(n.code,{children:"tests/integration/vector_io/test_openai_vector_stores.py"})]}),(0,i.jsx)(n.p,{children:"Update skip conditions if your provider supports OpenAI compatibility:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def skip_if_provider_doesnt_support_openai_vector_stores(provider_id):\n    unsupported = [\n        # Remove your provider from this list if it supports OpenAI vector stores\n        "your_vectorprovider",  # Remove this line if supported\n    ]\n    # ... rest of function\n\ndef skip_if_provider_doesnt_support_openai_vector_stores_search(provider_id):\n    unsupported = [\n        # Remove your provider from this list if it supports search\n        "your_vectorprovider",  # Remove this line if supported\n    ]\n    # ... rest of function\n'})})]}),(0,i.jsxs)(o.default,{value:"ci-tests",label:"CI Configuration",children:[(0,i.jsxs)(n.p,{children:["Update ",(0,i.jsx)(n.code,{children:".github/workflows/integration-vector-io-tests.yml"}),":"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Add your provider to the test matrix\nstrategy:\n  matrix:\n    provider:\n      - chroma\n      - faiss\n      - your_vectorprovider  # Add your provider here\n\n# If remote provider, add container setup\nservices:\n  your_vectorprovider:\n    image: your-provider/image:latest\n    ports:\n      - 8080:8080\n    env:\n      YOUR_ENV_VAR: value\n"})})]})]}),"\n",(0,i.jsx)(n.h3,{id:"step-5-update-dependencies",children:"Step 5: Update Dependencies"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsxs)(o.default,{value:"inline-deps",label:"Inline Provider Dependencies",children:[(0,i.jsxs)(n.p,{children:["For inline providers, update the ",(0,i.jsx)(n.code,{children:"unit"})," group:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"uv add your_pip_package --group unit\n"})})]}),(0,i.jsxs)(o.default,{value:"remote-deps",label:"Remote Provider Dependencies",children:[(0,i.jsxs)(n.p,{children:["For remote providers, update the ",(0,i.jsx)(n.code,{children:"test"})," group (used in CI):"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"uv add your_pip_package --group test\n"})})]})]}),"\n",(0,i.jsx)(n.h3,{id:"step-6-update-documentation",children:"Step 6: Update Documentation"}),"\n",(0,i.jsx)(n.p,{children:"Generate and update provider documentation:"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(o.default,{value:"generate-docs",label:"Generate Documentation",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Generate provider documentation\n./scripts/provider_codegen.py\n"})})}),(0,i.jsxs)(o.default,{value:"update-registry",label:"Update Registry Description",children:[(0,i.jsx)(n.p,{children:"Update the description in your registry entry:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'InlineProviderSpec(\n    # ... other fields\n    description="Your vector database provider description. Explain key features, use cases, and any special capabilities.",\n)\n'})})]})]}),"\n",(0,i.jsx)(n.h2,{id:"configuration-best-practices",children:"Configuration Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"provider-configuration-class",children:"Provider Configuration Class"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from pydantic import BaseModel, Field\nfrom typing import Optional\n\nclass YourVectorProviderConfig(BaseModel):\n    host: str = Field(\n        default="localhost",\n        description="Host address for the vector database"\n    )\n    port: int = Field(\n        default=19530,\n        description="Port number for database connection"\n    )\n    api_key: Optional[str] = Field(\n        default=None,\n        description="API key for authentication (if required)"\n    )\n    collection_prefix: str = Field(\n        default="llama_stack_",\n        description="Prefix for collection names"\n    )\n'})}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from llama_stack.apis.common.errors import ProviderError\n\nclass YourVectorIndex:\n    async def add_chunks(self, chunks):\n        try:\n            # Your implementation\n            return chunk_ids\n        except YourDatabaseException as e:\n            raise ProviderError(f"Failed to add chunks to vector database: {str(e)}")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"testing-your-implementation",children:"Testing Your Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"local-testing",children:"Local Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run unit tests\nuv run --group unit pytest tests/unit/providers/vector_io/\n\n# Run integration tests\nuv run --group test pytest tests/integration/vector_io/ --stack-config=starter\n"})}),"\n",(0,i.jsx)(n.h3,{id:"manual-validation",children:"Manual Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Test your provider manually\nfrom your_provider import YourVectorIOAdapter\n\nconfig = YourVectorProviderConfig(host="localhost", port=8080)\nadapter = YourVectorIOAdapter(config)\n\nawait adapter.initialize()\n# Test your methods...\nawait adapter.shutdown()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"common-implementation-patterns",children:"Common Implementation Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"connection-management",children:"Connection Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class YourVectorIndex:\n    def __init__(self, config):\n        self.config = config\n        self._client = None\n\n    async def initialize(self):\n        self._client = await create_client(self.config)\n\n    async def _ensure_connected(self):\n        if not self._client:\n            await self.initialize()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"batch-operations",children:"Batch Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"async def add_chunks(self, chunks: List[Chunk]) -> List[str]:\n    batch_size = 100\n    all_ids = []\n\n    for i in range(0, len(chunks), batch_size):\n        batch = chunks[i:i+batch_size]\n        batch_ids = await self._add_batch(batch)\n        all_ids.extend(batch_ids)\n\n    return all_ids\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/docs/providers/vector_io",children:"Vector IO Providers"})})," - Existing provider implementations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/docs/concepts",children:"Core Concepts"})})," - Understanding Llama Stack architecture"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"./new-api-provider",children:"New API Provider Guide"})})," - General provider development"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"./testing-record-replay",children:"Testing Guide"})})," - Advanced testing techniques"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},4865:(e,n,r)=>{r.d(n,{A:()=>h});var t=r(96540),i=r(34164),s=r(23104),a=r(47751),o=r(92303);const d={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var l=r(74848);function c(e){var n=e.className,r=e.block,t=e.selectedValue,a=e.selectValue,o=e.tabValues,c=[],p=(0,s.a_)().blockElementScrollPositionUntilNextRender,u=function(e){var n=e.currentTarget,r=c.indexOf(n),i=o[r].value;i!==t&&(p(n),a(i))},h=function(e){var n,r=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":var t,i=c.indexOf(e.currentTarget)+1;r=null!=(t=c[i])?t:c[0];break;case"ArrowLeft":var s,a=c.indexOf(e.currentTarget)-1;r=null!=(s=c[a])?s:c[c.length-1]}null==(n=r)||n.focus()};return(0,l.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},n),children:o.map(function(e){var n=e.value,r=e.label,s=e.attributes;return(0,l.jsx)("li",Object.assign({role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:function(e){c.push(e)},onKeyDown:h,onClick:u},s,{className:(0,i.A)("tabs__item",d.tabItem,null==s?void 0:s.className,{"tabs__item--active":t===n}),children:null!=r?r:n}),n)})})}function p(e){var n=e.lazy,r=e.children,s=e.selectedValue,a=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){var o=a.find(function(e){return e.props.value===s});return o?(0,t.cloneElement)(o,{className:(0,i.A)("margin-top--md",o.props.className)}):null}return(0,l.jsx)("div",{className:"margin-top--md",children:a.map(function(e,n){return(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s})})})}function u(e){var n=(0,a.u)(e);return(0,l.jsxs)("div",{className:(0,i.A)("tabs-container",d.tabList),children:[(0,l.jsx)(c,Object.assign({},n,e)),(0,l.jsx)(p,Object.assign({},n,e))]})}function h(e){var n=(0,o.default)();return(0,l.jsx)(u,Object.assign({},e,{children:(0,a.v)(e.children)}),String(n))}}}]);