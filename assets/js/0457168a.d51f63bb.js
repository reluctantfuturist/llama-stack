"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7399],{4865:(e,n,t)=>{t.d(n,{A:()=>u});var o=t(96540),l=t(34164),s=t(23104),i=t(47751),a=t(92303);const r={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var c=t(74848);function d(e){var n=e.className,t=e.block,o=e.selectedValue,i=e.selectValue,a=e.tabValues,d=[],h=(0,s.a_)().blockElementScrollPositionUntilNextRender,p=function(e){var n=e.currentTarget,t=d.indexOf(n),l=a[t].value;l!==o&&(h(n),i(l))},u=function(e){var n,t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var o,l=d.indexOf(e.currentTarget)+1;t=null!=(o=d[l])?o:d[0];break;case"ArrowLeft":var s,i=d.indexOf(e.currentTarget)-1;t=null!=(s=d[i])?s:d[d.length-1]}null==(n=t)||n.focus()};return(0,c.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":t},n),children:a.map(function(e){var n=e.value,t=e.label,s=e.attributes;return(0,c.jsx)("li",Object.assign({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:function(e){d.push(e)},onKeyDown:u,onClick:p},s,{className:(0,l.A)("tabs__item",r.tabItem,null==s?void 0:s.className,{"tabs__item--active":o===n}),children:null!=t?t:n}),n)})})}function h(e){var n=e.lazy,t=e.children,s=e.selectedValue,i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var a=i.find(function(e){return e.props.value===s});return a?(0,o.cloneElement)(a,{className:(0,l.A)("margin-top--md",a.props.className)}):null}return(0,c.jsx)("div",{className:"margin-top--md",children:i.map(function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==s})})})}function p(e){var n=(0,i.u)(e);return(0,c.jsxs)("div",{className:(0,l.A)("tabs-container",r.tabList),children:[(0,c.jsx)(d,Object.assign({},n,e)),(0,c.jsx)(h,Object.assign({},n,e))]})}function u(e){var n=(0,a.default)();return(0,c.jsx)(p,Object.assign({},e,{children:(0,i.v)(e.children)}),String(n))}},58254:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"building-applications/tools","title":"Tools","description":"Extend agent capabilities with external tools and function calling","source":"@site/docs/building-applications/tools.mdx","sourceDirName":"building-applications","slug":"/building-applications/tools","permalink":"/docs/building-applications/tools","draft":false,"unlisted":false,"editUrl":"https://github.com/meta-llama/llama-stack/tree/main/docs/docs/building-applications/tools.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Tools","description":"Extend agent capabilities with external tools and function calling","sidebar_label":"Tools","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Agents vs Responses API","permalink":"/docs/building-applications/responses-vs-agents"},"next":{"title":"Evaluations","permalink":"/docs/building-applications/evals"}}');var l=t(74848),s=t(28453),i=t(4865),a=t(19365);const r={title:"Tools",description:"Extend agent capabilities with external tools and function calling",sidebar_label:"Tools",sidebar_position:6},c="Tools",d={},h=[{value:"Server-side vs. Client-side Tool Execution",id:"server-side-vs-client-side-tool-execution",level:2},{value:"Server-side Tools",id:"server-side-tools",level:2},{value:"Web Search",id:"web-search",level:3},{value:"Math",id:"math",level:3},{value:"RAG",id:"rag",level:3},{value:"Model Context Protocol (MCP)",id:"model-context-protocol-mcp",level:2},{value:"Using Remote MCP Servers",id:"using-remote-mcp-servers",level:3},{value:"Running Your Own MCP Server",id:"running-your-own-mcp-server",level:3},{value:"Adding Custom (Client-side) Tools",id:"adding-custom-client-side-tools",level:2},{value:"Tool Invocation",id:"tool-invocation",level:2},{value:"Listing Available Tools",id:"listing-available-tools",level:2},{value:"Complete Examples",id:"complete-examples",level:2},{value:"Web Search Agent",id:"web-search-agent",level:3},{value:"WolframAlpha Math Agent",id:"wolframalpha-math-agent",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"\ud83d\udee0\ufe0f <strong>Tool Selection</strong>",id:"\ufe0f-tool-selection",level:3},{value:"\ud83d\udcdd <strong>Documentation</strong>",id:"-documentation",level:3},{value:"\ud83d\udd10 <strong>Security</strong>",id:"-security",level:3},{value:"\ud83d\udd04 <strong>Error Handling</strong>",id:"-error-handling",level:3},{value:"Related Resources",id:"related-resources",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"tools",children:"Tools"})}),"\n",(0,l.jsx)(n.p,{children:"Tools are functions that can be invoked by an agent to perform tasks. They are organized into tool groups and registered with specific providers. Each tool group represents a collection of related tools from a single provider. They are organized into groups so that state can be externalized: the collection operates on the same state typically."}),"\n",(0,l.jsx)(n.p,{children:'An example of this would be a "db_access" tool group that contains tools for interacting with a database. "list_tables", "query_table", "insert_row" could be examples of tools in this group.'}),"\n",(0,l.jsx)(n.p,{children:"Tools are treated as any other resource in llama stack like models. You can register them, have providers for them etc."}),"\n",(0,l.jsx)(n.p,{children:"When instantiating an agent, you can provide it a list of tool groups that it has access to. Agent gets the corresponding tool definitions for the specified tool groups and passes them along to the model."}),"\n",(0,l.jsxs)(n.p,{children:["Refer to the ",(0,l.jsx)(n.a,{href:"https://github.com/meta-llama/llama-stack/blob/main/docs/getting_started.ipynb",children:"Building AI Applications"})," notebook for more examples on how to use tools."]}),"\n",(0,l.jsx)(n.h2,{id:"server-side-vs-client-side-tool-execution",children:"Server-side vs. Client-side Tool Execution"}),"\n",(0,l.jsxs)(n.p,{children:["Llama Stack allows you to use both server-side and client-side tools. With server-side tools, ",(0,l.jsx)(n.code,{children:"agent.create_turn"})," can perform execution of the tool calls emitted by the model transparently giving the user the final answer desired. If client-side tools are provided, the tool call is sent back to the user for execution and optional continuation using the ",(0,l.jsx)(n.code,{children:"agent.resume_turn"})," method."]}),"\n",(0,l.jsx)(n.h2,{id:"server-side-tools",children:"Server-side Tools"}),"\n",(0,l.jsx)(n.p,{children:"Llama Stack provides built-in providers for some common tools. These include web search, math, and RAG capabilities."}),"\n",(0,l.jsx)(n.h3,{id:"web-search",children:"Web Search"}),"\n",(0,l.jsx)(n.p,{children:"You have three providers to execute the web search tool calls generated by a model: Brave Search, Bing Search, and Tavily Search."}),"\n",(0,l.jsx)(n.p,{children:'To indicate that the web search tool calls should be executed by brave-search, you can point the "builtin::websearch" toolgroup to the "brave-search" provider.'}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'client.toolgroups.register(\n    toolgroup_id="builtin::websearch",\n    provider_id="brave-search",\n    args={"max_results": 5},\n)\n'})}),"\n",(0,l.jsxs)(n.p,{children:["The tool requires an API key which can be provided either in the configuration or through the request header ",(0,l.jsx)(n.code,{children:"X-LlamaStack-Provider-Data"}),". The format of the header is:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'{"<provider_name>_api_key": <your api key>}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"math",children:"Math"}),"\n",(0,l.jsx)(n.p,{children:"The WolframAlpha tool provides access to computational knowledge through the WolframAlpha API."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'client.toolgroups.register(\n    toolgroup_id="builtin::wolfram_alpha", \n    provider_id="wolfram-alpha"\n)\n'})}),"\n",(0,l.jsx)(n.p,{children:"Example usage:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'result = client.tool_runtime.invoke_tool(\n    tool_name="wolfram_alpha", \n    args={"query": "solve x^2 + 2x + 1 = 0"}\n)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"rag",children:"RAG"}),"\n",(0,l.jsx)(n.p,{children:"The RAG tool enables retrieval of context from various types of memory banks (vector, key-value, keyword, and graph)."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Register Memory tool group\nclient.toolgroups.register(\n    toolgroup_id="builtin::rag",\n    provider_id="faiss",\n    args={"max_chunks": 5, "max_tokens_in_context": 4096},\n)\n'})}),"\n",(0,l.jsx)(n.p,{children:"Features:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Support for multiple memory bank types"}),"\n",(0,l.jsx)(n.li,{children:"Configurable query generation"}),"\n",(0,l.jsx)(n.li,{children:"Context retrieval with token limits"}),"\n"]}),"\n",(0,l.jsx)(n.admonition,{title:"Default Configuration",type:"note",children:(0,l.jsx)(n.p,{children:"By default, llama stack run.yaml defines toolgroups for web search, wolfram alpha and rag, that are provided by tavily-search, wolfram-alpha and rag providers."})}),"\n",(0,l.jsx)(n.h2,{id:"model-context-protocol-mcp",children:"Model Context Protocol (MCP)"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://github.com/modelcontextprotocol",children:"MCP"})," is an upcoming, popular standard for tool discovery and execution. It is a protocol that allows tools to be dynamically discovered from an MCP endpoint and can be used to extend the agent's capabilities."]}),"\n",(0,l.jsx)(n.h3,{id:"using-remote-mcp-servers",children:"Using Remote MCP Servers"}),"\n",(0,l.jsxs)(n.p,{children:["You can find some popular remote MCP servers ",(0,l.jsx)(n.a,{href:"https://github.com/jaw9c/awesome-remote-mcp-servers",children:"here"}),". You can register them as toolgroups in the same way as local providers."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'client.toolgroups.register(\n    toolgroup_id="mcp::deepwiki",\n    provider_id="model-context-protocol",\n    mcp_endpoint=URL(uri="https://mcp.deepwiki.com/sse"),\n)\n'})}),"\n",(0,l.jsx)(n.p,{children:'Note that most of the more useful MCP servers need you to authenticate with them. Many of them use OAuth2.0 for authentication. You can provide authorization headers to send to the MCP server using the "Provider Data" abstraction provided by Llama Stack. When making an agent call,'}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'agent = Agent(\n    ...,\n    tools=["mcp::deepwiki"],\n    extra_headers={\n        "X-LlamaStack-Provider-Data": json.dumps(\n            {\n                "mcp_headers": {\n                    "http://mcp.deepwiki.com/sse": {\n                        "Authorization": "Bearer <your_access_token>",\n                    },\n                },\n            }\n        ),\n    },\n)\nagent.create_turn(...)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"running-your-own-mcp-server",children:"Running Your Own MCP Server"}),"\n",(0,l.jsx)(n.p,{children:"Here's an example of how to run a simple MCP server that exposes a File System as a set of tools to the Llama Stack agent."}),"\n",(0,l.jsxs)(i.A,{children:[(0,l.jsx)(a.default,{value:"setup",label:"Server Setup",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"# Start your MCP server\nmkdir /tmp/content\ntouch /tmp/content/foo\ntouch /tmp/content/bar\nnpx -y supergateway --port 8000 --stdio 'npx -y @modelcontextprotocol/server-filesystem /tmp/content'\n"})})}),(0,l.jsx)(a.default,{value:"register",label:"Registration",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Register the MCP server as a tool group\nclient.toolgroups.register(\n    toolgroup_id="mcp::filesystem",\n    provider_id="model-context-protocol",\n    mcp_endpoint=URL(uri="http://localhost:8000/sse"),\n)\n'})})})]}),"\n",(0,l.jsx)(n.h2,{id:"adding-custom-client-side-tools",children:"Adding Custom (Client-side) Tools"}),"\n",(0,l.jsx)(n.p,{children:"When you want to use tools other than the built-in tools, you just need to implement a python function with a docstring. The content of the docstring will be used to describe the tool and the parameters and passed along to the generative model."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Example tool definition\ndef my_tool(input: int) -> int:\n    """\n    Runs my awesome tool.\n\n    :param input: some int parameter\n    """\n    return input * 2\n'})}),"\n",(0,l.jsx)(n.admonition,{title:"Documentation Best Practices",type:"tip",children:(0,l.jsx)(n.p,{children:"We employ python docstrings to describe the tool and the parameters. It is important to document the tool and the parameters so that the model can use the tool correctly. It is recommended to experiment with different docstrings to see how they affect the model's behavior."})}),"\n",(0,l.jsxs)(n.p,{children:["Once defined, simply pass the tool to the agent config. ",(0,l.jsx)(n.code,{children:"Agent"})," will take care of the rest (calling the model with the tool definition, executing the tool, and returning the result to the model for the next iteration)."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# Example agent config with client provided tools\nagent = Agent(client, ..., tools=[my_tool])\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Refer to ",(0,l.jsx)(n.a,{href:"https://github.com/meta-llama/llama-stack-apps/blob/main/examples/agents/e2e_loop_with_client_tools.py",children:"llama-stack-apps"})," for an example of how to use client provided tools."]}),"\n",(0,l.jsx)(n.h2,{id:"tool-invocation",children:"Tool Invocation"}),"\n",(0,l.jsxs)(n.p,{children:["Tools can be invoked using the ",(0,l.jsx)(n.code,{children:"invoke_tool"})," method:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'result = client.tool_runtime.invoke_tool(\n    tool_name="web_search", \n    kwargs={"query": "What is the capital of France?"}\n)\n'})}),"\n",(0,l.jsx)(n.p,{children:"The result contains:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"content"}),": The tool's output"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"error_message"}),": Optional error message if the tool failed"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"error_code"}),": Optional error code if the tool failed"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"listing-available-tools",children:"Listing Available Tools"}),"\n",(0,l.jsx)(n.p,{children:"You can list all available tools or filter by tool group:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# List all tools\nall_tools = client.tools.list_tools()\n\n# List tools in a specific group\ngroup_tools = client.tools.list_tools(toolgroup_id="search_tools")\n'})}),"\n",(0,l.jsx)(n.h2,{id:"complete-examples",children:"Complete Examples"}),"\n",(0,l.jsx)(n.h3,{id:"web-search-agent",children:"Web Search Agent"}),"\n",(0,l.jsxs)(i.A,{children:[(0,l.jsxs)(a.default,{value:"setup",label:"Setup & Configuration",children:[(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["Start by registering a Tavily API key at ",(0,l.jsx)(n.a,{href:"https://tavily.com/",children:"Tavily"}),"."]}),"\n",(0,l.jsx)(n.li,{children:"[Optional] Provide the API key directly to the Llama Stack server"}),"\n"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'export TAVILY_SEARCH_API_KEY="your key"\n'})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"--env TAVILY_SEARCH_API_KEY=${TAVILY_SEARCH_API_KEY}\n"})})]}),(0,l.jsx)(a.default,{value:"implementation",label:"Implementation",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from llama_stack_client.lib.agents.agent import Agent\nfrom llama_stack_client.types.agent_create_params import AgentConfig\nfrom llama_stack_client.lib.agents.event_logger import EventLogger\nfrom llama_stack_client import LlamaStackClient\n\nclient = LlamaStackClient(\n    base_url=f"http://localhost:8321",\n    provider_data={\n        "tavily_search_api_key": "your_TAVILY_SEARCH_API_KEY"\n    },  # Set this from the client side. No need to provide it if it has already been configured on the Llama Stack server.\n)\n\nagent = Agent(\n    client,\n    model="meta-llama/Llama-3.2-3B-Instruct",\n    instructions=(\n        "You are a web search assistant, must use websearch tool to look up the most current and precise information available. "\n    ),\n    tools=["builtin::websearch"],\n)\n\nsession_id = agent.create_session("websearch-session")\n\nresponse = agent.create_turn(\n    messages=[\n        {"role": "user", "content": "How did the USA perform in the last Olympics?"}\n    ],\n    session_id=session_id,\n)\nfor log in EventLogger().log(response):\n    log.print()\n'})})})]}),"\n",(0,l.jsx)(n.h3,{id:"wolframalpha-math-agent",children:"WolframAlpha Math Agent"}),"\n",(0,l.jsxs)(i.A,{children:[(0,l.jsx)(a.default,{value:"setup",label:"Setup & Configuration",children:(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["Start by registering for a WolframAlpha API key at ",(0,l.jsx)(n.a,{href:"https://developer.wolframalpha.com/access",children:"WolframAlpha Developer Portal"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Provide the API key either when starting the Llama Stack server:","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"--env WOLFRAM_ALPHA_API_KEY=${WOLFRAM_ALPHA_API_KEY}\n"})}),"\n","or from the client side:","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'client = LlamaStackClient(\n    base_url="http://localhost:8321",\n    provider_data={"wolfram_alpha_api_key": wolfram_api_key},\n)\n'})}),"\n"]}),"\n"]})}),(0,l.jsx)(a.default,{value:"implementation",label:"Implementation",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Configure the tools in the Agent by setting tools=["builtin::wolfram_alpha"]\nagent = Agent(\n    client,\n    model="meta-llama/Llama-3.2-3B-Instruct", \n    instructions="You are a mathematical assistant that can solve complex equations.",\n    tools=["builtin::wolfram_alpha"],\n)\n\nsession_id = agent.create_session("math-session")\n\n# Example user query\nresponse = agent.create_turn(\n    messages=[{"role": "user", "content": "Solve x^2 + 2x + 1 = 0 using WolframAlpha"}],\n    session_id=session_id,\n)\n'})})})]}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsxs)(n.h3,{id:"\ufe0f-tool-selection",children:["\ud83d\udee0\ufe0f ",(0,l.jsx)(n.strong,{children:"Tool Selection"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Use ",(0,l.jsx)(n.strong,{children:"server-side tools"})," for production applications requiring reliability and security"]}),"\n",(0,l.jsxs)(n.li,{children:["Use ",(0,l.jsx)(n.strong,{children:"client-side tools"})," for development, prototyping, or specialized integrations"]}),"\n",(0,l.jsx)(n.li,{children:"Combine multiple tool types for comprehensive functionality"}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"-documentation",children:["\ud83d\udcdd ",(0,l.jsx)(n.strong,{children:"Documentation"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Write clear, detailed docstrings for custom tools"}),"\n",(0,l.jsx)(n.li,{children:"Include parameter descriptions and expected return types"}),"\n",(0,l.jsx)(n.li,{children:"Test tool descriptions with the model to ensure proper usage"}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"-security",children:["\ud83d\udd10 ",(0,l.jsx)(n.strong,{children:"Security"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Store API keys securely using environment variables or secure configuration"}),"\n",(0,l.jsxs)(n.li,{children:["Use the ",(0,l.jsx)(n.code,{children:"X-LlamaStack-Provider-Data"})," header for dynamic authentication"]}),"\n",(0,l.jsx)(n.li,{children:"Validate tool inputs and outputs for security"}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"-error-handling",children:["\ud83d\udd04 ",(0,l.jsx)(n.strong,{children:"Error Handling"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Implement proper error handling in custom tools"}),"\n",(0,l.jsx)(n.li,{children:"Use structured error responses with meaningful messages"}),"\n",(0,l.jsx)(n.li,{children:"Monitor tool performance and reliability"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"./agent",children:"Agents"})})," - Building intelligent agents with tools"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"./rag",children:"RAG (Retrieval Augmented Generation)"})})," - Using knowledge retrieval tools"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"./agent-execution-loop",children:"Agent Execution Loop"})})," - Understanding tool execution flow"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"https://github.com/meta-llama/llama-stack/blob/main/docs/getting_started.ipynb",children:"Building AI Applications Notebook"})})," - Comprehensive examples"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"https://github.com/meta-llama/llama-stack-apps",children:"Llama Stack Apps Examples"})})," - Real-world tool implementations"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(p,{...e})}):p(e)}}}]);