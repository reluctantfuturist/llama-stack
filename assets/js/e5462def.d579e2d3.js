"use strict";(self.webpackChunkdocusaurus_template_openapi_docs=self.webpackChunkdocusaurus_template_openapi_docs||[]).push([[4452],{28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>c});var t=i(96540);const r={},s=t.createContext(r);function d(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(s.Provider,{value:n},e.children)}},50886:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"providers/inference/inline_meta-reference","title":"inline::meta-reference","description":"Meta\'s reference implementation of inference with support for various model formats and optimization techniques","source":"@site/docs/providers/inference/inline_meta-reference.mdx","sourceDirName":"providers/inference","slug":"/providers/inference/inline_meta-reference","permalink":"/llama-stack/docs/providers/inference/inline_meta-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/meta-llama/llama-stack/tree/main/docs/docs/providers/inference/inline_meta-reference.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"description":"Meta\'s reference implementation of inference with support for various model formats and optimization techniques","sidebar_label":"Meta Reference","sidebar_position":2,"title":"inline::meta-reference"},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/llama-stack/docs/providers/inference/"},"next":{"title":"Sentence Transformers","permalink":"/llama-stack/docs/providers/inference/inline_sentence-transformers"}}');var r=i(74848),s=i(28453);const d={description:"Meta's reference implementation of inference with support for various model formats and optimization techniques",sidebar_label:"Meta Reference",sidebar_position:2,title:"inline::meta-reference"},c="inline::meta-reference",o={},l=[{value:"Description",id:"description",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Sample Configuration",id:"sample-configuration",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"inlinemeta-reference",children:"inline::meta-reference"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Meta's reference implementation of inference with support for various model formats and optimization techniques."}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"model"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str | None"})}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"torch_seed"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"int | None"})}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"max_seq_len"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<class 'int'>"})}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"4096"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"max_batch_size"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<class 'int'>"})}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"model_parallel_size"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"int | None"})}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"create_distributed_process_group"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<class 'bool'>"})}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"True"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"checkpoint_dir"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str | None"})}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"quantization"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Bf16QuantizationConfig | Fp8QuantizationConfig | Int4QuantizationConfig, annotation=NoneType, required=True, discriminator='type'"})}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"sample-configuration",children:"Sample Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"model: Llama3.2-3B-Instruct\ncheckpoint_dir: ${env.CHECKPOINT_DIR:=null}\nquantization:\n  type: ${env.QUANTIZATION_TYPE:=bf16}\nmodel_parallel_size: ${env.MODEL_PARALLEL_SIZE:=0}\nmax_batch_size: ${env.MAX_BATCH_SIZE:=1}\nmax_seq_len: ${env.MAX_SEQ_LEN:=4096}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);