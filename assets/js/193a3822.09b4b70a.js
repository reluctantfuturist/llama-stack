"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5968],{30828:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"providers/vector_io/inline_sqlite-vec","title":"inline::sqlite-vec","description":"[SQLite-Vec](https://github","source":"@site/docs/providers/vector_io/inline_sqlite-vec.mdx","sourceDirName":"providers/vector_io","slug":"/providers/vector_io/inline_sqlite-vec","permalink":"/docs/providers/vector_io/inline_sqlite-vec","draft":false,"unlisted":false,"editUrl":"https://github.com/meta-llama/llama-stack/tree/main/docs/docs/providers/vector_io/inline_sqlite-vec.mdx","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"description":"[SQLite-Vec](https://github","sidebar_label":"SQLite-Vec","sidebar_position":7,"title":"inline::sqlite-vec"},"sidebar":"tutorialSidebar","previous":{"title":"Qdrant","permalink":"/docs/providers/vector_io/inline_qdrant"},"next":{"title":"Chromadb","permalink":"/docs/providers/vector_io/remote_chromadb"}}');var s=t(74848),n=t(28453);const o={description:"[SQLite-Vec](https://github",sidebar_label:"SQLite-Vec",sidebar_position:7,title:"inline::sqlite-vec"},d="inline::sqlite-vec",l={},c=[{value:"Description",id:"description",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Sample Configuration",id:"sample-configuration",level:2}];function a(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"inlinesqlite-vec",children:"inline::sqlite-vec"})}),"\n",(0,s.jsx)(i.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.a,{href:"https://github.com/asg017/sqlite-vec",children:"SQLite-Vec"})," is an inline vector database provider for Llama Stack. It\nallows you to store and query vectors directly within an SQLite database.\nThat means you're not limited to storing vectors in memory or in a separate service."]}),"\n",(0,s.jsx)(i.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Field"}),(0,s.jsx)(i.th,{children:"Type"}),(0,s.jsx)(i.th,{children:"Required"}),(0,s.jsx)(i.th,{children:"Default"}),(0,s.jsx)(i.th,{children:"Description"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"db_path"})}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"<class 'str'>"})}),(0,s.jsx)(i.td,{children:"No"}),(0,s.jsx)(i.td,{}),(0,s.jsx)(i.td,{children:"Path to the SQLite database file"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"kvstore"})}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"utils.kvstore.config.RedisKVStoreConfig | utils.kvstore.config.SqliteKVStoreConfig | utils.kvstore.config.PostgresKVStoreConfig | utils.kvstore.config.MongoDBKVStoreConfig"})}),(0,s.jsx)(i.td,{children:"No"}),(0,s.jsx)(i.td,{children:"sqlite"}),(0,s.jsx)(i.td,{children:"Config for KV store backend (SQLite only for now)"})]})]})]}),"\n",(0,s.jsx)(i.h2,{id:"sample-configuration",children:"Sample Configuration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-yaml",children:"db_path: ${env.SQLITE_STORE_DIR:=~/.llama/dummy}/sqlite_vec.db\nkvstore:\n  type: sqlite\n  db_path: ${env.SQLITE_STORE_DIR:=~/.llama/dummy}/sqlite_vec_registry.db\n"})})]})}function h(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);