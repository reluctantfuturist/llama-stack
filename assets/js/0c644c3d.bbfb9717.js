"use strict";(self.webpackChunkdocusaurus_template_openapi_docs=self.webpackChunkdocusaurus_template_openapi_docs||[]).push([[272],{76354:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>b,contentTitle:()=>f,default:()=>j,frontMatter:()=>g,metadata:()=>n,toc:()=>y});const n=JSON.parse('{"id":"api/openai-embeddings","title":"Generate OpenAI-compatible embeddings for the given input using the specified model.","description":"Generate OpenAI-compatible embeddings for the given input using the specified model.","source":"@site/docs/api/openai-embeddings.api.mdx","sourceDirName":"api","slug":"/api/openai-embeddings","permalink":"/llama-stack/docs/api/openai-embeddings","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"openai-embeddings","title":"Generate OpenAI-compatible embeddings for the given input using the specified model.","description":"Generate OpenAI-compatible embeddings for the given input using the specified model.","sidebar_label":"Generate OpenAI-compatible embeddings for the given input using the specified model.","hide_title":true,"hide_table_of_contents":true,"api":"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","sidebar_class_name":"post api-method","info_path":"docs/api/llama-stack-specification","custom_edit_url":null},"sidebar":"apiSidebar","previous":{"title":"Generate an OpenAI-compatible completion for the given prompt using the specified model.","permalink":"/llama-stack/docs/api/openai-completion"},"next":{"title":"Rerank a list of documents based on their relevance to a query.","permalink":"/llama-stack/docs/api/rerank"}}');var r=i(74848),o=i(28453),s=i(33617),a=i.n(s),d=i(17543),p=i.n(d),c=i(86013),l=i.n(c),m=i(63723),u=i.n(m),h=(i(18766),i(79329),i(9303));const g={id:"openai-embeddings",title:"Generate OpenAI-compatible embeddings for the given input using the specified model.",description:"Generate OpenAI-compatible embeddings for the given input using the specified model.",sidebar_label:"Generate OpenAI-compatible embeddings for the given input using the specified model.",hide_title:!0,hide_table_of_contents:!0,api:"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",sidebar_class_name:"post api-method",info_path:"docs/api/llama-stack-specification",custom_edit_url:null},f=void 0,b={},y=[];function P(e){const t={p:"p",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(h.default,{as:"h1",className:"openapi__heading",children:"Generate OpenAI-compatible embeddings for the given input using the specified model."}),"\n",(0,r.jsx)(a(),{method:"post",path:"/v1/openai/v1/embeddings",context:"endpoint"}),"\n",(0,r.jsx)(t.p,{children:"Generate OpenAI-compatible embeddings for the given input using the specified model."}),"\n",(0,r.jsx)(h.default,{id:"request",as:"h2",className:"openapi-tabs__heading",children:"Request"}),"\n",(0,r.jsx)(p(),{parameters:[]}),"\n",(0,r.jsx)(l(),{title:"Body",body:{content:{"application/json":{schema:{type:"object",properties:{model:{type:"string",description:"The identifier of the model to use. The model must be an embedding model registered with Llama Stack and available via the /models endpoint."},input:{oneOf:[{type:"string"},{type:"array",items:{type:"string"}}],description:"Input text to embed, encoded as a string or array of strings. To embed multiple inputs in a single request, pass an array of strings."},encoding_format:{type:"string",description:'(Optional) The format to return the embeddings in. Can be either "float" or "base64". Defaults to "float".'},dimensions:{type:"integer",description:"(Optional) The number of dimensions the resulting output embeddings should have. Only supported in text-embedding-3 and later models."},user:{type:"string",description:"(Optional) A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse."}},additionalProperties:!1,required:["model","input"],title:"OpenaiEmbeddingsRequest"}}},required:!0}}),"\n",(0,r.jsx)(u(),{id:void 0,label:void 0,responses:{200:{description:"An OpenAIEmbeddingsResponse containing the embeddings.",content:{"application/json":{schema:{type:"object",properties:{object:{type:"string",const:"list",default:"list",description:'The object type, which will be "list"'},data:{type:"array",items:{type:"object",properties:{object:{type:"string",const:"embedding",default:"embedding",description:'The object type, which will be "embedding"'},embedding:{oneOf:[{type:"array",items:{type:"number"}},{type:"string"}],description:'The embedding vector as a list of floats (when encoding_format="float") or as a base64-encoded string (when encoding_format="base64")'},index:{type:"integer",description:"The index of the embedding in the input list"}},additionalProperties:!1,required:["object","embedding","index"],title:"OpenAIEmbeddingData",description:"A single embedding data object from an OpenAI-compatible embeddings response."},description:"List of embedding data objects"},model:{type:"string",description:"The model that was used to generate the embeddings"},usage:{description:"Usage information",type:"object",properties:{prompt_tokens:{type:"integer",description:"The number of tokens in the input"},total_tokens:{type:"integer",description:"The total number of tokens used"}},additionalProperties:!1,required:["prompt_tokens","total_tokens"],title:"OpenAIEmbeddingUsage"}},additionalProperties:!1,required:["object","data","model","usage"],title:"OpenAIEmbeddingsResponse",description:"Response from an OpenAI-compatible embeddings request."}}}},400:{description:"The request was invalid or malformed",content:{"application/json":{schema:{type:"object",properties:{status:{type:"integer",description:"HTTP status code"},title:{type:"string",description:"Error title, a short summary of the error which is invariant for an error type"},detail:{type:"string",description:"Error detail, a longer human-readable description of the error"},instance:{type:"string",description:"(Optional) A URL which can be used to retrieve more information about the specific occurrence of the error"}},additionalProperties:!1,required:["status","title","detail"],title:"Error",description:"Error response from the API. Roughly follows RFC 7807."},example:{status:400,title:"Bad Request",detail:"The request was invalid or malformed"}}}},429:{description:"The client has sent too many requests in a given amount of time",content:{"application/json":{schema:{type:"object",properties:{status:{type:"integer",description:"HTTP status code"},title:{type:"string",description:"Error title, a short summary of the error which is invariant for an error type"},detail:{type:"string",description:"Error detail, a longer human-readable description of the error"},instance:{type:"string",description:"(Optional) A URL which can be used to retrieve more information about the specific occurrence of the error"}},additionalProperties:!1,required:["status","title","detail"],title:"Error",description:"Error response from the API. Roughly follows RFC 7807."},example:{status:429,title:"Too Many Requests",detail:"You have exceeded the rate limit. Please try again later."}}}},500:{description:"The server encountered an unexpected error",content:{"application/json":{schema:{type:"object",properties:{status:{type:"integer",description:"HTTP status code"},title:{type:"string",description:"Error title, a short summary of the error which is invariant for an error type"},detail:{type:"string",description:"Error detail, a longer human-readable description of the error"},instance:{type:"string",description:"(Optional) A URL which can be used to retrieve more information about the specific occurrence of the error"}},additionalProperties:!1,required:["status","title","detail"],title:"Error",description:"Error response from the API. Roughly follows RFC 7807."},example:{status:500,title:"Internal Server Error",detail:"An unexpected error occurred. Our team has been notified."}}}},default:{description:"An unexpected error occurred",content:{"application/json":{schema:{type:"object",properties:{status:{type:"integer",description:"HTTP status code"},title:{type:"string",description:"Error title, a short summary of the error which is invariant for an error type"},detail:{type:"string",description:"Error detail, a longer human-readable description of the error"},instance:{type:"string",description:"(Optional) A URL which can be used to retrieve more information about the specific occurrence of the error"}},additionalProperties:!1,required:["status","title","detail"],title:"Error",description:"Error response from the API. Roughly follows RFC 7807."},example:{status:0,title:"Error",detail:"An unexpected error occurred"}}}}}})]})}function j(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(P,{...e})}):P(e)}}}]);