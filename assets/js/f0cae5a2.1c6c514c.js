"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2022],{4865:(e,n,t)=>{t.d(n,{A:()=>m});var i=t(96540),s=t(34164),r=t(23104),o=t(47751),a=t(92303);const l={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var c=t(74848);function d(e){var n=e.className,t=e.block,i=e.selectedValue,o=e.selectValue,a=e.tabValues,d=[],u=(0,r.a_)().blockElementScrollPositionUntilNextRender,h=function(e){var n=e.currentTarget,t=d.indexOf(n),s=a[t].value;s!==i&&(u(n),o(s))},m=function(e){var n,t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":var i,s=d.indexOf(e.currentTarget)+1;t=null!=(i=d[s])?i:d[0];break;case"ArrowLeft":var r,o=d.indexOf(e.currentTarget)-1;t=null!=(r=d[o])?r:d[d.length-1]}null==(n=t)||n.focus()};return(0,c.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:a.map(function(e){var n=e.value,t=e.label,r=e.attributes;return(0,c.jsx)("li",Object.assign({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:function(e){d.push(e)},onKeyDown:m,onClick:h},r,{className:(0,s.A)("tabs__item",l.tabItem,null==r?void 0:r.className,{"tabs__item--active":i===n}),children:null!=t?t:n}),n)})})}function u(e){var n=e.lazy,t=e.children,r=e.selectedValue,o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var a=o.find(function(e){return e.props.value===r});return a?(0,i.cloneElement)(a,{className:(0,s.A)("margin-top--md",a.props.className)}):null}return(0,c.jsx)("div",{className:"margin-top--md",children:o.map(function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==r})})})}function h(e){var n=(0,o.u)(e);return(0,c.jsxs)("div",{className:(0,s.A)("tabs-container",l.tabList),children:[(0,c.jsx)(d,Object.assign({},n,e)),(0,c.jsx)(u,Object.assign({},n,e))]})}function m(e){var n=(0,a.default)();return(0,c.jsx)(h,Object.assign({},e,{children:(0,o.v)(e.children)}),String(n))}},62172:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/rag-ca9af4ace7391ad97e83754eeb81cdd8.png"},99901:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"building-applications/rag","title":"Retrieval Augmented Generation (RAG)","description":"Build knowledge-enhanced AI applications with external document retrieval","source":"@site/docs/building-applications/rag.mdx","sourceDirName":"building-applications","slug":"/building-applications/rag","permalink":"/llama-stack/docs/building-applications/rag","draft":false,"unlisted":false,"editUrl":"https://github.com/meta-llama/llama-stack/tree/main/docs/docs/building-applications/rag.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Retrieval Augmented Generation (RAG)","description":"Build knowledge-enhanced AI applications with external document retrieval","sidebar_label":"RAG (Retrieval Augmented Generation)","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/llama-stack/docs/building-applications/"},"next":{"title":"Agents","permalink":"/llama-stack/docs/building-applications/agent"}}');var s=t(74848),r=t(28453),o=t(4865),a=t(19365);const l={title:"Retrieval Augmented Generation (RAG)",description:"Build knowledge-enhanced AI applications with external document retrieval",sidebar_label:"RAG (Retrieval Augmented Generation)",sidebar_position:2},c="Retrieval Augmented Generation (RAG)",d={},u=[{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Setting up Vector Databases",id:"setting-up-vector-databases",level:2},{value:"Document Ingestion",id:"document-ingestion",level:2},{value:"Direct Document Insertion",id:"direct-document-insertion",level:3},{value:"Document Retrieval",id:"document-retrieval",level:3},{value:"Using the RAG Tool",id:"using-the-rag-tool",level:2},{value:"OpenAI API Integration &amp; Migration",id:"openai-api-integration--migration",level:3},{value:"Migration Path",id:"migration-path",level:3},{value:"RAG Tool Example",id:"rag-tool-example",level:3},{value:"Custom Context Configuration",id:"custom-context-configuration",level:3},{value:"Building RAG-Enhanced Agents",id:"building-rag-enhanced-agents",level:2},{value:"Agent with Knowledge Search",id:"agent-with-knowledge-search",level:3},{value:"Document-Aware Conversations",id:"document-aware-conversations",level:3},{value:"Viewing Agent Responses",id:"viewing-agent-responses",level:3},{value:"Vector Database Management",id:"vector-database-management",level:2},{value:"Unregistering Vector DBs",id:"unregistering-vector-dbs",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"\ud83c\udfaf <strong>Document Chunking</strong>",id:"-document-chunking",level:3},{value:"\ud83d\udd0d <strong>Embedding Strategy</strong>",id:"-embedding-strategy",level:3},{value:"\ud83d\udcca <strong>Query Optimization</strong>",id:"-query-optimization",level:3},{value:"\ud83d\udee1\ufe0f <strong>Error Handling</strong>",id:"\ufe0f-error-handling",level:3},{value:"Appendix",id:"appendix",level:2},{value:"More RAGDocument Examples",id:"more-ragdocument-examples",level:3},{value:"Related Resources",id:"related-resources",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"retrieval-augmented-generation-rag",children:"Retrieval Augmented Generation (RAG)"})}),"\n",(0,s.jsx)(n.p,{children:"RAG enables your applications to reference and recall information from previous interactions or external documents."}),"\n",(0,s.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,s.jsx)(n.p,{children:"Llama Stack organizes the APIs that enable RAG into three layers:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lower-Level APIs"}),": Deal with raw storage and retrieval. These include Vector IO, KeyValue IO (coming soon) and Relational IO (also coming soon)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RAG Tool"}),": A first-class tool as part of the ",(0,s.jsx)(n.a,{href:"./tools",children:"Tools API"})," that allows you to ingest documents (from URLs, files, etc) with various chunking strategies and query them smartly"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Agents API"}),": The top-level ",(0,s.jsx)(n.a,{href:"./agent",children:"Agents API"})," that allows you to create agents that can use the tools to answer questions, perform tasks, and more"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"RAG System Architecture",src:t(62172).A+"",width:"1484",height:"910"})}),"\n",(0,s.jsx)(n.p,{children:"The RAG system uses lower-level storage for different types of data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Vector IO"}),": For semantic search and retrieval"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key-Value and Relational IO"}),": For structured data storage"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Future Storage Types",type:"info",children:(0,s.jsx)(n.p,{children:"We may add more storage types like Graph IO in the future."})}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-vector-databases",children:"Setting up Vector Databases"}),"\n",(0,s.jsxs)(n.p,{children:["For this guide, we will use ",(0,s.jsx)(n.a,{href:"https://ollama.com/",children:"Ollama"})," as the inference provider. Ollama is an LLM runtime that allows you to run Llama models locally."]}),"\n",(0,s.jsx)(n.p,{children:"Here's how to set up a vector database for RAG:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Create HTTP client\nimport os\nfrom llama_stack_client import LlamaStackClient\n\nclient = LlamaStackClient(base_url=f"http://localhost:{os.environ[\'LLAMA_STACK_PORT\']}")\n\n# Register a vector database\nvector_db_id = "my_documents"\nresponse = client.vector_dbs.register(\n    vector_db_id=vector_db_id,\n    embedding_model="all-MiniLM-L6-v2",\n    embedding_dimension=384,\n    provider_id="faiss",\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"document-ingestion",children:"Document Ingestion"}),"\n",(0,s.jsx)(n.p,{children:"You can ingest documents into the vector database using two methods: directly inserting pre-chunked documents or using the RAG Tool."}),"\n",(0,s.jsx)(n.h3,{id:"direct-document-insertion",children:"Direct Document Insertion"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(a.default,{value:"basic",label:"Basic Insertion",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# You can insert a pre-chunked document directly into the vector db\nchunks = [\n    {\n        "content": "Your document text here",\n        "mime_type": "text/plain",\n        "metadata": {\n            "document_id": "doc1",\n            "author": "Jane Doe",\n        },\n    },\n]\nclient.vector_io.insert(vector_db_id=vector_db_id, chunks=chunks)\n'})})}),(0,s.jsxs)(a.default,{value:"embeddings",label:"With Precomputed Embeddings",children:[(0,s.jsx)(n.p,{children:"If you decide to precompute embeddings for your documents, you can insert them directly into the vector database by including the embedding vectors in the chunk data. This is useful if you have a separate embedding service or if you want to customize the ingestion process."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'chunks_with_embeddings = [\n    {\n        "content": "First chunk of text",\n        "mime_type": "text/plain",\n        "embedding": [0.1, 0.2, 0.3, ...],  # Your precomputed embedding vector\n        "metadata": {"document_id": "doc1", "section": "introduction"},\n    },\n    {\n        "content": "Second chunk of text", \n        "mime_type": "text/plain",\n        "embedding": [0.2, 0.3, 0.4, ...],  # Your precomputed embedding vector\n        "metadata": {"document_id": "doc1", "section": "methodology"},\n    },\n]\nclient.vector_io.insert(vector_db_id=vector_db_id, chunks=chunks_with_embeddings)\n'})}),(0,s.jsx)(n.admonition,{title:"Embedding Dimensions",type:"warning",children:(0,s.jsxs)(n.p,{children:["When providing precomputed embeddings, ensure the embedding dimension matches the ",(0,s.jsx)(n.code,{children:"embedding_dimension"})," specified when registering the vector database."]})})]})]}),"\n",(0,s.jsx)(n.h3,{id:"document-retrieval",children:"Document Retrieval"}),"\n",(0,s.jsx)(n.p,{children:"You can query the vector database to retrieve documents based on their embeddings."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# You can then query for these chunks\nchunks_response = client.vector_io.query(\n    vector_db_id=vector_db_id, \n    query="What do you know about..."\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-the-rag-tool",children:"Using the RAG Tool"}),"\n",(0,s.jsx)(n.admonition,{title:"Deprecation Notice",type:"danger",children:(0,s.jsx)(n.p,{children:"The RAG Tool is being deprecated in favor of directly using the OpenAI-compatible Search API. We recommend migrating to the OpenAI APIs for better compatibility and future support."})}),"\n",(0,s.jsxs)(n.p,{children:["A better way to ingest documents is to use the RAG Tool. This tool allows you to ingest documents from URLs, files, etc. and automatically chunks them into smaller pieces. More examples for how to format a RAGDocument can be found in the ",(0,s.jsx)(n.a,{href:"#more-ragdocument-examples",children:"appendix"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"openai-api-integration--migration",children:"OpenAI API Integration & Migration"}),"\n",(0,s.jsx)(n.p,{children:"The RAG tool has been updated to use OpenAI-compatible APIs. This provides several benefits:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Files API Integration"}),": Documents are now uploaded using OpenAI's file upload endpoints"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Vector Stores API"}),": Vector storage operations use OpenAI's vector store format with configurable chunking strategies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Resilience"}),": When processing multiple documents, individual failures are logged but don't crash the operation. Failed documents are skipped while successful ones continue processing."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"migration-path",children:"Migration Path"}),"\n",(0,s.jsx)(n.p,{children:"We recommend migrating to the OpenAI-compatible Search API for:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better OpenAI Ecosystem Integration"}),": Direct compatibility with OpenAI tools and workflows including the Responses API"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Future-Proof"}),": Continued support and feature development"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Full OpenAI Compatibility"}),": Vector Stores, Files, and Search APIs are fully compatible with OpenAI's Responses API"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The OpenAI APIs are used under the hood, so you can continue to use your existing RAG Tool code with minimal changes. However, we recommend updating your code to use the new OpenAI-compatible APIs for better long-term support. If any documents fail to process, they will be logged in the response but will not cause the entire operation to fail."}),"\n",(0,s.jsx)(n.h3,{id:"rag-tool-example",children:"RAG Tool Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from llama_stack_client import RAGDocument\n\nurls = ["memory_optimizations.rst", "chat.rst", "llama3.rst"]\ndocuments = [\n    RAGDocument(\n        document_id=f"num-{i}",\n        content=f"https://raw.githubusercontent.com/pytorch/torchtune/main/docs/source/tutorials/{url}",\n        mime_type="text/plain",\n        metadata={},\n    )\n    for i, url in enumerate(urls)\n]\n\nclient.tool_runtime.rag_tool.insert(\n    documents=documents,\n    vector_db_id=vector_db_id,\n    chunk_size_in_tokens=512,\n)\n\n# Query documents\nresults = client.tool_runtime.rag_tool.query(\n    vector_db_ids=[vector_db_id],\n    content="What do you know about...",\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-context-configuration",children:"Custom Context Configuration"}),"\n",(0,s.jsx)(n.p,{children:"You can configure how the RAG tool adds metadata to the context if you find it useful for your application:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Query documents with custom template\nresults = client.tool_runtime.rag_tool.query(\n    vector_db_ids=[vector_db_id],\n    content="What do you know about...",\n    query_config={\n        "chunk_template": "Result {index}\\nContent: {chunk.content}\\nMetadata: {metadata}\\n",\n    },\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"building-rag-enhanced-agents",children:"Building RAG-Enhanced Agents"}),"\n",(0,s.jsx)(n.p,{children:"One of the most powerful patterns is combining agents with RAG capabilities. Here's a complete example:"}),"\n",(0,s.jsx)(n.h3,{id:"agent-with-knowledge-search",children:"Agent with Knowledge Search"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from llama_stack_client import Agent\n\n# Create agent with memory\nagent = Agent(\n    client,\n    model="meta-llama/Llama-3.3-70B-Instruct",\n    instructions="You are a helpful assistant",\n    tools=[\n        {\n            "name": "builtin::rag/knowledge_search",\n            "args": {\n                "vector_db_ids": [vector_db_id],\n                # Defaults\n                "query_config": {\n                    "chunk_size_in_tokens": 512,\n                    "chunk_overlap_in_tokens": 0,\n                    "chunk_template": "Result {index}\\nContent: {chunk.content}\\nMetadata: {metadata}\\n",\n                },\n            },\n        }\n    ],\n)\nsession_id = agent.create_session("rag_session")\n\n# Ask questions about documents in the vector db, and the agent will query the db to answer the question.\nresponse = agent.create_turn(\n    messages=[{"role": "user", "content": "How to optimize memory in PyTorch?"}],\n    session_id=session_id,\n)\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"Agent Instructions",type:"tip",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"instructions"})," field in the ",(0,s.jsx)(n.code,{children:"AgentConfig"})," can be used to guide the agent's behavior. It is important to experiment with different instructions to see what works best for your use case."]})}),"\n",(0,s.jsx)(n.h3,{id:"document-aware-conversations",children:"Document-Aware Conversations"}),"\n",(0,s.jsx)(n.p,{children:"You can also pass documents along with the user's message and ask questions about them:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Initial document ingestion\nresponse = agent.create_turn(\n    messages=[\n        {"role": "user", "content": "I am providing some documents for reference."}\n    ],\n    documents=[\n        {\n            "content": "https://raw.githubusercontent.com/pytorch/torchtune/main/docs/source/tutorials/memory_optimizations.rst",\n            "mime_type": "text/plain",\n        }\n    ],\n    session_id=session_id,\n)\n\n# Query with RAG\nresponse = agent.create_turn(\n    messages=[{"role": "user", "content": "What are the key topics in the documents?"}],\n    session_id=session_id,\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"viewing-agent-responses",children:"Viewing Agent Responses"}),"\n",(0,s.jsx)(n.p,{children:"You can print the response with the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from llama_stack_client import AgentEventLogger\n\nfor log in AgentEventLogger().log(response):\n    log.print()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"vector-database-management",children:"Vector Database Management"}),"\n",(0,s.jsx)(n.h3,{id:"unregistering-vector-dbs",children:"Unregistering Vector DBs"}),"\n",(0,s.jsx)(n.p,{children:"If you need to clean up and unregister vector databases, you can do so as follows:"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(a.default,{value:"single",label:"Single Database",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Unregister a specified vector database\nvector_db_id = "my_vector_db_id"\nprint(f"Unregistering vector database: {vector_db_id}")\nclient.vector_dbs.unregister(vector_db_id=vector_db_id)\n'})})}),(0,s.jsx)(a.default,{value:"all",label:"All Databases",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Unregister all vector databases\nfor vector_db_id in client.vector_dbs.list():\n    print(f"Unregistering vector database: {vector_db_id.identifier}")\n    client.vector_dbs.unregister(vector_db_id=vector_db_id.identifier)\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.h3,{id:"-document-chunking",children:["\ud83c\udfaf ",(0,s.jsx)(n.strong,{children:"Document Chunking"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use appropriate chunk sizes (512 tokens is often a good starting point)"}),"\n",(0,s.jsx)(n.li,{children:"Consider overlap between chunks for better context preservation"}),"\n",(0,s.jsx)(n.li,{children:"Experiment with different chunking strategies for your content type"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"-embedding-strategy",children:["\ud83d\udd0d ",(0,s.jsx)(n.strong,{children:"Embedding Strategy"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Choose embedding models that match your domain"}),"\n",(0,s.jsx)(n.li,{children:"Consider the trade-off between embedding dimension and performance"}),"\n",(0,s.jsx)(n.li,{children:"Test different embedding models for your specific use case"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"-query-optimization",children:["\ud83d\udcca ",(0,s.jsx)(n.strong,{children:"Query Optimization"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use specific, well-formed queries for better retrieval"}),"\n",(0,s.jsx)(n.li,{children:"Experiment with different search strategies"}),"\n",(0,s.jsx)(n.li,{children:"Consider hybrid approaches (keyword + semantic search)"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"\ufe0f-error-handling",children:["\ud83d\udee1\ufe0f ",(0,s.jsx)(n.strong,{children:"Error Handling"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement proper error handling for failed document processing"}),"\n",(0,s.jsx)(n.li,{children:"Monitor ingestion success rates"}),"\n",(0,s.jsx)(n.li,{children:"Have fallback strategies for retrieval failures"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"appendix",children:"Appendix"}),"\n",(0,s.jsx)(n.h3,{id:"more-ragdocument-examples",children:"More RAGDocument Examples"}),"\n",(0,s.jsx)(n.p,{children:"Here are various ways to create RAGDocument objects for different content types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from llama_stack_client import RAGDocument\nimport base64\n\n# File URI\nRAGDocument(document_id="num-0", content={"uri": "file://path/to/file"})\n\n# Plain text\nRAGDocument(document_id="num-1", content="plain text")\n\n# Explicit text input\nRAGDocument(\n    document_id="num-2",\n    content={\n        "type": "text",\n        "text": "plain text input",\n    },  # for inputs that should be treated as text explicitly\n)\n\n# Image from URL\nRAGDocument(\n    document_id="num-3",\n    content={\n        "type": "image",\n        "image": {"url": {"uri": "https://mywebsite.com/image.jpg"}},\n    },\n)\n\n# Base64 encoded image\nB64_ENCODED_IMAGE = base64.b64encode(\n    requests.get(\n        "https://raw.githubusercontent.com/meta-llama/llama-stack/refs/heads/main/docs/_static/llama-stack.png"\n    ).content\n)\nRAGDocument(\n    document_id="num-4",\n    content={"type": "image", "image": {"data": B64_ENCODED_IMAGE}},\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For more strongly typed interaction, use the typed dicts found ",(0,s.jsx)(n.a,{href:"https://github.com/meta-llama/llama-stack-client-python/blob/38cd91c9e396f2be0bec1ee96a19771582ba6f17/src/llama_stack_client/types/shared_params/document.py",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./agent",children:"Agent Framework"})})," - Building intelligent agents"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"./tools",children:"Tools Integration"})})," - Extending agent capabilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/providers/vector_io/",children:"Vector IO Providers"})})," - Available vector database options"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/providers/openai-compatibility",children:"OpenAI Compatibility"})})," - Using OpenAI APIs"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);